//////////////////////////////////////////////////////////////////////
// This file was auto-generated by codelite's wxCrafter Plugin
// wxCrafter project file: UI.wxcp
// Do not modify this file by hand!
//////////////////////////////////////////////////////////////////////

#ifndef _PLUGIN_AI_UI_BASE_CLASSES_HPP
#define _PLUGIN_AI_UI_BASE_CLASSES_HPP

// clang-format off
#include <wx/settings.h>
#include <wx/xrc/xmlres.h>
#include <wx/xrc/xh_bmp.h>
#include <wx/panel.h>
#include <wx/artprov.h>
#include <wx/sizer.h>
#include <wx/splitter.h>
#include <wx/stc/stc.h>
#include "clThemedSTC.hpp"
#include <wx/pen.h>
#include <wx/aui/auibar.h>
#include <map>
#include <wx/menu.h>
#include <wx/frame.h>
#include <wx/iconbndl.h>
#include <wx/wizard.h>
#include <vector>
#include <wx/stattext.h>
#include <wx/choice.h>
#include <wx/arrstr.h>
#include <wx/textctrl.h>
#include <wx/spinctrl.h>
#include <wx/dialog.h>
#include <wx/dataview.h>
#include <wx/button.h>
#include <wx/statline.h>
#if wxVERSION_NUMBER >= 2900
#include <wx/persist.h>
#include <wx/persist/toplevel.h>
#include <wx/persist/bookctrl.h>
#include <wx/persist/treebook.h>
#endif

#ifdef WXC_FROM_DIP
#undef WXC_FROM_DIP
#endif
#if wxVERSION_NUMBER >= 3100
#define WXC_FROM_DIP(x) wxWindow::FromDIP(x, NULL)
#else
#define WXC_FROM_DIP(x) x
#endif

// clang-format on

class AssistanceAIChatWindowBase : public wxPanel
{
protected:
    wxSplitterWindow* m_mainSplitter;
    wxPanel* m_splitterPageTop;
    clThemedSTC* m_stcOutput;
    wxPanel* m_splitterPageBottom;
    wxAuiToolBar* m_toolbar;
    clThemedSTC* m_stcInput;

protected:
    virtual void OnInputUI(wxUpdateUIEvent& event) { event.Skip(); }

public:
    clThemedSTC* GetStcOutput() { return m_stcOutput; }
    wxPanel* GetSplitterPageTop() { return m_splitterPageTop; }
    wxAuiToolBar* GetToolbar() { return m_toolbar; }
    clThemedSTC* GetStcInput() { return m_stcInput; }
    wxPanel* GetSplitterPageBottom() { return m_splitterPageBottom; }
    wxSplitterWindow* GetMainSplitter() { return m_mainSplitter; }
    AssistanceAIChatWindowBase(wxWindow* parent,
                               wxWindowID id = wxID_ANY,
                               const wxPoint& pos = wxDefaultPosition,
                               const wxSize& size = wxSize(800, 600),
                               long style = wxTAB_TRAVERSAL);
    virtual ~AssistanceAIChatWindowBase();
};

class ChatAIWindowFrameBase : public wxFrame
{
protected:
protected:
    virtual void OnClose(wxCloseEvent& event) { event.Skip(); }

public:
    ChatAIWindowFrameBase(wxWindow* parent,
                          wxWindowID id = wxID_ANY,
                          const wxString& title = _("ChatAI"),
                          const wxPoint& pos = wxDefaultPosition,
                          const wxSize& size = wxSize(800, 600),
                          long style = wxDEFAULT_FRAME_STYLE | wxFRAME_FLOAT_ON_PARENT);
    virtual ~ChatAIWindowFrameBase();
};

class NewLLMEndpointWizardBase : public wxWizard
{
protected:
    std::vector<wxWizardPageSimple*> m_pages;

    wxWizardPageSimple* m_wizardPageSettings;
    wxStaticText* m_staticText69;
    wxChoice* m_choiceProviders;
    wxStaticText* m_staticText72;
    wxTextCtrl* m_textCtrlBaseURL;
    wxStaticText* m_staticText76;
    wxTextCtrl* m_textCtrlModel;
    wxStaticText* m_staticText78;
    wxSpinCtrl* m_spinCtrlContextSizeKB;
    wxWizardPageSimple* m_wizardPageAPI;
    wxStaticText* m_staticText114;
    wxTextCtrl* m_textCtrlAPIKey;
    wxStaticText* m_staticText117;
    wxSpinCtrl* m_spinCtrlMaxTokens;

protected:
    virtual void OnPageChanging(wxWizardEvent& event) { event.Skip(); }
    virtual void OnFinished(wxWizardEvent& event) { event.Skip(); }
    virtual void OnProviderChanged(wxCommandEvent& event) { event.Skip(); }
    virtual void OnContextSizeUI(wxUpdateUIEvent& event) { event.Skip(); }
    virtual void OnApiKeyUI(wxUpdateUIEvent& event) { event.Skip(); }
    virtual void OnMaxTokensUI(wxUpdateUIEvent& event) { event.Skip(); }

public:
    wxStaticText* GetStaticText69() { return m_staticText69; }
    wxChoice* GetChoiceProviders() { return m_choiceProviders; }
    wxStaticText* GetStaticText72() { return m_staticText72; }
    wxTextCtrl* GetTextCtrlBaseURL() { return m_textCtrlBaseURL; }
    wxStaticText* GetStaticText76() { return m_staticText76; }
    wxTextCtrl* GetTextCtrlModel() { return m_textCtrlModel; }
    wxStaticText* GetStaticText78() { return m_staticText78; }
    wxSpinCtrl* GetSpinCtrlContextSizeKB() { return m_spinCtrlContextSizeKB; }
    wxWizardPageSimple* GetWizardPageSettings() { return m_wizardPageSettings; }
    wxStaticText* GetStaticText114() { return m_staticText114; }
    wxTextCtrl* GetTextCtrlAPIKey() { return m_textCtrlAPIKey; }
    wxStaticText* GetStaticText117() { return m_staticText117; }
    wxSpinCtrl* GetSpinCtrlMaxTokens() { return m_spinCtrlMaxTokens; }
    wxWizardPageSimple* GetWizardPageAPI() { return m_wizardPageAPI; }
    NewLLMEndpointWizardBase(wxWindow* parent,
                             wxWindowID id = wxID_ANY,
                             const wxString& title = _("New LLM Endpoint"),
                             const wxBitmap& bmp = wxNullBitmap,
                             const wxPoint& pos = wxDefaultPosition,
                             long style = wxDEFAULT_DIALOG_STYLE);
    wxWizardPageSimple* GetFirstPage() const
    {
        if (!m_pages.empty())
            return m_pages.at(0);
        return NULL;
    }
    virtual ~NewLLMEndpointWizardBase();
};

class ChatHistoryDialogBase : public wxDialog
{
protected:
    wxDataViewListCtrl* m_dvListCtrlPrompts;
    wxButton* m_button130;
    wxStaticLine* m_staticLine131;
    wxButton* m_button126;
    wxButton* m_button129;
    wxStaticLine* m_staticLine132;
    wxButton* m_button127;

protected:
    virtual void OnItemActivated(wxDataViewEvent& event) { event.Skip(); }
    virtual void OnInsert(wxCommandEvent& event) { event.Skip(); }
    virtual void OnInsertUI(wxUpdateUIEvent& event) { event.Skip(); }
    virtual void OnDeleteUI(wxUpdateUIEvent& event) { event.Skip(); }
    virtual void OnDelete(wxCommandEvent& event) { event.Skip(); }
    virtual void OnClearUI(wxUpdateUIEvent& event) { event.Skip(); }
    virtual void OnClear(wxCommandEvent& event) { event.Skip(); }

public:
    wxDataViewListCtrl* GetDvListCtrlPrompts() { return m_dvListCtrlPrompts; }
    wxButton* GetButton130() { return m_button130; }
    wxStaticLine* GetStaticLine131() { return m_staticLine131; }
    wxButton* GetButton126() { return m_button126; }
    wxButton* GetButton129() { return m_button129; }
    wxStaticLine* GetStaticLine132() { return m_staticLine132; }
    wxButton* GetButton127() { return m_button127; }
    ChatHistoryDialogBase(wxWindow* parent,
                          wxWindowID id = wxID_ANY,
                          const wxString& title = _("Chat History"),
                          const wxPoint& pos = wxDefaultPosition,
                          const wxSize& size = wxSize(-1, -1),
                          long style = wxDEFAULT_DIALOG_STYLE | wxRESIZE_BORDER);
    virtual ~ChatHistoryDialogBase();
};

#endif
