//////////////////////////////////////////////////////////////////////
// This file was auto-generated by codelite's wxCrafter Plugin
// wxCrafter project file: CustomControls.wxcp
// Do not modify this file by hand!
//////////////////////////////////////////////////////////////////////

#include "CustomControls.hpp"

// Declare the bitmap loading function
extern void wxC26B3InitBitmapResources();

namespace
{
// return the wxBORDER_SIMPLE that matches the current application theme
[[maybe_unused]]
wxBorder get_border_simple_theme_aware_bit()
{
#if wxVERSION_NUMBER >= 3300 && defined(__WXMSW__)
    return wxSystemSettings::GetAppearance().IsDark() ? wxBORDER_SIMPLE : wxBORDER_DEFAULT;
#else
    return wxBORDER_DEFAULT;
#endif
} // get_border_simple_theme_aware_bit
bool bBitmapLoaded = false;
} // namespace

TextGenerationPreviewFrameBase::TextGenerationPreviewFrameBase(
    wxWindow* parent, wxWindowID id, const wxString& title, const wxPoint& pos, const wxSize& size, long style)
    : wxFrame(parent, id, title, pos, size, style)
{
    if (!bBitmapLoaded) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxC26B3InitBitmapResources();
        bBitmapLoaded = true;
    }

    wxBoxSizer* boxSizer1 = new wxBoxSizer(wxVERTICAL);
    this->SetSizer(boxSizer1);

    m_main_panel = new wxPanel(this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), wxTAB_TRAVERSAL);

    boxSizer1->Add(m_main_panel, 1, wxALL | wxEXPAND, WXC_FROM_DIP(5));

    wxBoxSizer* boxSizer9 = new wxBoxSizer(wxVERTICAL);
    m_main_panel->SetSizer(boxSizer9);

    m_editor = new wxStyledTextCtrl(
        m_main_panel, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_main_panel, wxSize(500, 300)), wxBORDER_THEME);
    // Configure the fold margin
    m_editor->SetMarginType(4, wxSTC_MARGIN_SYMBOL);
    m_editor->SetMarginMask(4, wxSTC_MASK_FOLDERS);
    m_editor->SetMarginSensitive(4, true);
    m_editor->SetMarginWidth(4, 0);

    // Configure the tracker margin
    m_editor->SetMarginWidth(1, 0);

    // Configure the symbol margin
    m_editor->SetMarginType(2, wxSTC_MARGIN_SYMBOL);
    m_editor->SetMarginMask(2, ~(wxSTC_MASK_FOLDERS));
    m_editor->SetMarginWidth(2, 0);
    m_editor->SetMarginSensitive(2, true);

    // Configure the line numbers margin
    m_editor->SetMarginType(0, wxSTC_MARGIN_NUMBER);
    m_editor->SetMarginWidth(0, 0);

    // Configure the line symbol margin
    m_editor->SetMarginType(3, wxSTC_MARGIN_FORE);
    m_editor->SetMarginMask(3, 0);
    m_editor->SetMarginWidth(3, 0);
    // Select the lexer
    m_editor->SetLexer(wxSTC_LEX_NULL);
    // Set default font / styles
    m_editor->StyleClearAll();
    m_editor->SetWrapMode(1);
    m_editor->SetIndentationGuides(0);
    m_editor->SetKeyWords(0, wxT(""));
    m_editor->SetKeyWords(1, wxT(""));
    m_editor->SetKeyWords(2, wxT(""));
    m_editor->SetKeyWords(3, wxT(""));
    m_editor->SetKeyWords(4, wxT(""));

    boxSizer9->Add(m_editor, 1, wxALL | wxEXPAND, WXC_FROM_DIP(0));

    wxBoxSizer* boxSizer5 = new wxBoxSizer(wxHORIZONTAL);

    boxSizer1->Add(boxSizer5, 0, wxALL | wxALIGN_CENTER_HORIZONTAL, WXC_FROM_DIP(10));

    m_button_copy = new wxButton(this, wxID_COPY, _("Copy"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);
    m_button_copy->SetToolTip(_("Copy the generated output to the clipboard"));

    boxSizer5->Add(m_button_copy, 0, wxALL, WXC_FROM_DIP(5));

    m_button_cancel =
        new wxButton(this, wxID_CANCEL, _("Close"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);
    m_button_cancel->SetDefault();
    m_button_cancel->SetToolTip(_("Click to close the view or hit ESCAPE."));

    boxSizer5->Add(m_button_cancel, 0, wxALL, WXC_FROM_DIP(5));

    SetName(wxT("TextGenerationPreviewFrameBase"));
    SetSize(wxDLG_UNIT(this, wxSize(500, 300)));
    if (GetSizer()) {
        GetSizer()->Fit(this);
    }
    if (GetParent()) {
        CentreOnParent(wxBOTH);
    } else {
        CentreOnScreen(wxBOTH);
    }
    if (!wxPersistenceManager::Get().Find(this)) {
        wxPersistenceManager::Get().RegisterAndRestore(this);
    } else {
        wxPersistenceManager::Get().Restore(this);
    }
    // Connect events
    this->Bind(wxEVT_CLOSE_WINDOW, &TextGenerationPreviewFrameBase::OnCloseWindow, this);
    m_button_copy->Bind(wxEVT_COMMAND_BUTTON_CLICKED, &TextGenerationPreviewFrameBase::OnCopy, this);
    m_button_copy->Bind(wxEVT_UPDATE_UI, &TextGenerationPreviewFrameBase::OnCopyUI, this);
    m_button_cancel->Bind(wxEVT_COMMAND_BUTTON_CLICKED, &TextGenerationPreviewFrameBase::OnClose, this);
}

TextGenerationPreviewFrameBase::~TextGenerationPreviewFrameBase()
{
    this->Unbind(wxEVT_CLOSE_WINDOW, &TextGenerationPreviewFrameBase::OnCloseWindow, this);
    m_button_copy->Unbind(wxEVT_COMMAND_BUTTON_CLICKED, &TextGenerationPreviewFrameBase::OnCopy, this);
    m_button_copy->Unbind(wxEVT_UPDATE_UI, &TextGenerationPreviewFrameBase::OnCopyUI, this);
    m_button_cancel->Unbind(wxEVT_COMMAND_BUTTON_CLICKED, &TextGenerationPreviewFrameBase::OnClose, this);
}

PromptEditorBaseDlg::PromptEditorBaseDlg(
    wxWindow* parent, wxWindowID id, const wxString& title, const wxPoint& pos, const wxSize& size, long style)
    : wxDialog(parent, id, title, pos, size, style)
{
    if (!bBitmapLoaded) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxC26B3InitBitmapResources();
        bBitmapLoaded = true;
    }

    wxBoxSizer* boxSizer27 = new wxBoxSizer(wxVERTICAL);
    this->SetSizer(boxSizer27);

    wxBoxSizer* boxSizer31 = new wxBoxSizer(wxVERTICAL);

    boxSizer27->Add(boxSizer31, 1, wxALL | wxEXPAND, WXC_FROM_DIP(5));

    m_splitter = new wxSplitterWindow(
        this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(500, 300)), wxSP_LIVE_UPDATE | wxSP_3D);
    m_splitter->SetSashGravity(0);
    m_splitter->SetMinimumPaneSize(50);

    boxSizer31->Add(m_splitter, 1, wxALL | wxEXPAND, WXC_FROM_DIP(5));

    m_splitterPageLabels =
        new wxPanel(m_splitter, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_splitter, wxSize(-1, -1)), wxTAB_TRAVERSAL);

    wxBoxSizer* boxSizer43 = new wxBoxSizer(wxVERTICAL);
    m_splitterPageLabels->SetSizer(boxSizer43);

    m_dvListCtrlPrompts = new wxDataViewListCtrl(m_splitterPageLabels,
                                                 wxID_ANY,
                                                 wxDefaultPosition,
                                                 wxDLG_UNIT(m_splitterPageLabels, wxSize(-1, -1)),
                                                 wxDV_SINGLE);
    m_dvListCtrlPrompts->SetFocus();

    boxSizer43->Add(m_dvListCtrlPrompts, 1, wxALL | wxEXPAND, WXC_FROM_DIP(5));

    m_dvListCtrlPrompts->AppendTextColumn(
        _("Available Prompts"), wxDATAVIEW_CELL_INERT, WXC_FROM_DIP(-2), wxALIGN_LEFT, 0);
    m_splitterPageEditors =
        new wxPanel(m_splitter, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_splitter, wxSize(-1, -1)), wxTAB_TRAVERSAL);
    m_splitter->SplitVertically(m_splitterPageLabels, m_splitterPageEditors, 250);

    wxBoxSizer* boxSizer44 = new wxBoxSizer(wxVERTICAL);
    m_splitterPageEditors->SetSizer(boxSizer44);

    m_simpleBook = new wxSimplebook(
        m_splitterPageEditors, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_splitterPageEditors, wxSize(-1, -1)), 0);
    m_simpleBook->SetName(wxT("m_simpleBook"));
    m_simpleBook->SetEffect(wxSHOW_EFFECT_NONE);

    boxSizer44->Add(m_simpleBook, 1, wxALL | wxEXPAND, WXC_FROM_DIP(5));

    wxBoxSizer* boxSizer48 = new wxBoxSizer(wxHORIZONTAL);

    boxSizer27->Add(boxSizer48, 0, wxALL | wxALIGN_CENTER_HORIZONTAL, WXC_FROM_DIP(10));

    m_button51 = new wxButton(this, wxID_REVERT, _("Defaults"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);
    m_button51->SetToolTip(_("Restore prompts to defaults"));

    boxSizer48->Add(m_button51, 0, wxALL | wxALIGN_LEFT | wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));

    m_button49 = new wxButton(this, wxID_SAVE, _("&Save"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);
    m_button49->SetDefault();

    boxSizer48->Add(m_button49, 0, wxALL | wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));

    m_button50 = new wxButton(this, wxID_CANCEL, _("&Cancel"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);

    boxSizer48->Add(m_button50, 0, wxALL | wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));

#if wxVERSION_NUMBER >= 2900
    if (!wxPersistenceManager::Get().Find(m_simpleBook)) {
        wxPersistenceManager::Get().RegisterAndRestore(m_simpleBook);
    } else {
        wxPersistenceManager::Get().Restore(m_simpleBook);
    }
#endif

    SetName(wxT("PromptEditorBaseDlg"));
    SetSize(wxDLG_UNIT(this, wxSize(800, 600)));
    if (GetSizer()) {
        GetSizer()->Fit(this);
    }
    if (GetParent()) {
        CentreOnParent(wxBOTH);
    } else {
        CentreOnScreen(wxBOTH);
    }
    if (!wxPersistenceManager::Get().Find(this)) {
        wxPersistenceManager::Get().RegisterAndRestore(this);
    } else {
        wxPersistenceManager::Get().Restore(this);
    }
    // Connect events
    m_dvListCtrlPrompts->Bind(wxEVT_COMMAND_DATAVIEW_SELECTION_CHANGED, &PromptEditorBaseDlg::OnPromptChanged, this);
    m_button51->Bind(wxEVT_COMMAND_BUTTON_CLICKED, &PromptEditorBaseDlg::OnDefaults, this);
    m_button49->Bind(wxEVT_COMMAND_BUTTON_CLICKED, &PromptEditorBaseDlg::OnSave, this);
    m_button49->Bind(wxEVT_UPDATE_UI, &PromptEditorBaseDlg::OnSaveUI, this);
}

PromptEditorBaseDlg::~PromptEditorBaseDlg()
{
    m_dvListCtrlPrompts->Unbind(wxEVT_COMMAND_DATAVIEW_SELECTION_CHANGED, &PromptEditorBaseDlg::OnPromptChanged, this);
    m_button51->Unbind(wxEVT_COMMAND_BUTTON_CLICKED, &PromptEditorBaseDlg::OnDefaults, this);
    m_button49->Unbind(wxEVT_COMMAND_BUTTON_CLICKED, &PromptEditorBaseDlg::OnSave, this);
    m_button49->Unbind(wxEVT_UPDATE_UI, &PromptEditorBaseDlg::OnSaveUI, this);
}
